#ifndef _ALTERA_HPS_0_H_
#define _ALTERA_HPS_0_H_

/*
 * This file was automatically generated by the swinfo2header utility.
 * 
 * Created from SOPC Builder system 'soc_system' in
 * file './soc_system.sopcinfo'.
 */

/*
 * This file contains macros for module 'hps_0' and devices
 * connected to the following masters:
 *   h2f_axi_master
 *   h2f_lw_axi_master
 * 
 * Do not include this header file and another header file created for a
 * different module or master group at the same time.
 * Doing so may result in duplicate macro names.
 * Instead, use the system header file which has macros with unique names.
 */

/*
 * Macros for device 'ILC', class 'interrupt_latency_counter'
 * The macros are prefixed with 'ILC_'.
 * The prefix is the slave descriptor.
 */
#define ILC_COMPONENT_TYPE interrupt_latency_counter
#define ILC_COMPONENT_NAME ILC
#define ILC_BASE 0x0
#define ILC_SPAN 256
#define ILC_END 0xff

/*
 * Macros for device 'seg5', class 'altera_avalon_pio'
 * The macros are prefixed with 'SEG5_'.
 * The prefix is the slave descriptor.
 */
#define SEG5_COMPONENT_TYPE altera_avalon_pio
#define SEG5_COMPONENT_NAME seg5
#define SEG5_BASE 0x100
#define SEG5_SPAN 16
#define SEG5_END 0x10f
#define SEG5_BIT_CLEARING_EDGE_REGISTER 0
#define SEG5_BIT_MODIFYING_OUTPUT_REGISTER 0
#define SEG5_CAPTURE 0
#define SEG5_DATA_WIDTH 7
#define SEG5_DO_TEST_BENCH_WIRING 0
#define SEG5_DRIVEN_SIM_VALUE 0
#define SEG5_EDGE_TYPE NONE
#define SEG5_FREQ 50000000
#define SEG5_HAS_IN 0
#define SEG5_HAS_OUT 1
#define SEG5_HAS_TRI 0
#define SEG5_IRQ_TYPE NONE
#define SEG5_RESET_VALUE 0

/*
 * Macros for device 'seg4', class 'altera_avalon_pio'
 * The macros are prefixed with 'SEG4_'.
 * The prefix is the slave descriptor.
 */
#define SEG4_COMPONENT_TYPE altera_avalon_pio
#define SEG4_COMPONENT_NAME seg4
#define SEG4_BASE 0x110
#define SEG4_SPAN 16
#define SEG4_END 0x11f
#define SEG4_BIT_CLEARING_EDGE_REGISTER 0
#define SEG4_BIT_MODIFYING_OUTPUT_REGISTER 0
#define SEG4_CAPTURE 0
#define SEG4_DATA_WIDTH 7
#define SEG4_DO_TEST_BENCH_WIRING 0
#define SEG4_DRIVEN_SIM_VALUE 0
#define SEG4_EDGE_TYPE NONE
#define SEG4_FREQ 50000000
#define SEG4_HAS_IN 0
#define SEG4_HAS_OUT 1
#define SEG4_HAS_TRI 0
#define SEG4_IRQ_TYPE NONE
#define SEG4_RESET_VALUE 0

/*
 * Macros for device 'seg3', class 'altera_avalon_pio'
 * The macros are prefixed with 'SEG3_'.
 * The prefix is the slave descriptor.
 */
#define SEG3_COMPONENT_TYPE altera_avalon_pio
#define SEG3_COMPONENT_NAME seg3
#define SEG3_BASE 0x120
#define SEG3_SPAN 16
#define SEG3_END 0x12f
#define SEG3_BIT_CLEARING_EDGE_REGISTER 0
#define SEG3_BIT_MODIFYING_OUTPUT_REGISTER 0
#define SEG3_CAPTURE 0
#define SEG3_DATA_WIDTH 7
#define SEG3_DO_TEST_BENCH_WIRING 0
#define SEG3_DRIVEN_SIM_VALUE 0
#define SEG3_EDGE_TYPE NONE
#define SEG3_FREQ 50000000
#define SEG3_HAS_IN 0
#define SEG3_HAS_OUT 1
#define SEG3_HAS_TRI 0
#define SEG3_IRQ_TYPE NONE
#define SEG3_RESET_VALUE 0

/*
 * Macros for device 'seg2', class 'altera_avalon_pio'
 * The macros are prefixed with 'SEG2_'.
 * The prefix is the slave descriptor.
 */
#define SEG2_COMPONENT_TYPE altera_avalon_pio
#define SEG2_COMPONENT_NAME seg2
#define SEG2_BASE 0x130
#define SEG2_SPAN 16
#define SEG2_END 0x13f
#define SEG2_BIT_CLEARING_EDGE_REGISTER 0
#define SEG2_BIT_MODIFYING_OUTPUT_REGISTER 0
#define SEG2_CAPTURE 0
#define SEG2_DATA_WIDTH 7
#define SEG2_DO_TEST_BENCH_WIRING 0
#define SEG2_DRIVEN_SIM_VALUE 0
#define SEG2_EDGE_TYPE NONE
#define SEG2_FREQ 50000000
#define SEG2_HAS_IN 0
#define SEG2_HAS_OUT 1
#define SEG2_HAS_TRI 0
#define SEG2_IRQ_TYPE NONE
#define SEG2_RESET_VALUE 0

/*
 * Macros for device 'seg1', class 'altera_avalon_pio'
 * The macros are prefixed with 'SEG1_'.
 * The prefix is the slave descriptor.
 */
#define SEG1_COMPONENT_TYPE altera_avalon_pio
#define SEG1_COMPONENT_NAME seg1
#define SEG1_BASE 0x140
#define SEG1_SPAN 16
#define SEG1_END 0x14f
#define SEG1_BIT_CLEARING_EDGE_REGISTER 0
#define SEG1_BIT_MODIFYING_OUTPUT_REGISTER 0
#define SEG1_CAPTURE 0
#define SEG1_DATA_WIDTH 7
#define SEG1_DO_TEST_BENCH_WIRING 0
#define SEG1_DRIVEN_SIM_VALUE 0
#define SEG1_EDGE_TYPE NONE
#define SEG1_FREQ 50000000
#define SEG1_HAS_IN 0
#define SEG1_HAS_OUT 1
#define SEG1_HAS_TRI 0
#define SEG1_IRQ_TYPE NONE
#define SEG1_RESET_VALUE 0

/*
 * Macros for device 'seg0', class 'altera_avalon_pio'
 * The macros are prefixed with 'SEG0_'.
 * The prefix is the slave descriptor.
 */
#define SEG0_COMPONENT_TYPE altera_avalon_pio
#define SEG0_COMPONENT_NAME seg0
#define SEG0_BASE 0x150
#define SEG0_SPAN 16
#define SEG0_END 0x15f
#define SEG0_BIT_CLEARING_EDGE_REGISTER 0
#define SEG0_BIT_MODIFYING_OUTPUT_REGISTER 0
#define SEG0_CAPTURE 0
#define SEG0_DATA_WIDTH 7
#define SEG0_DO_TEST_BENCH_WIRING 0
#define SEG0_DRIVEN_SIM_VALUE 0
#define SEG0_EDGE_TYPE NONE
#define SEG0_FREQ 50000000
#define SEG0_HAS_IN 0
#define SEG0_HAS_OUT 1
#define SEG0_HAS_TRI 0
#define SEG0_IRQ_TYPE NONE
#define SEG0_RESET_VALUE 0

/*
 * Macros for device 'led_pio', class 'altera_avalon_pio'
 * The macros are prefixed with 'LED_PIO_'.
 * The prefix is the slave descriptor.
 */
#define LED_PIO_COMPONENT_TYPE altera_avalon_pio
#define LED_PIO_COMPONENT_NAME led_pio
#define LED_PIO_BASE 0x160
#define LED_PIO_SPAN 16
#define LED_PIO_END 0x16f
#define LED_PIO_BIT_CLEARING_EDGE_REGISTER 0
#define LED_PIO_BIT_MODIFYING_OUTPUT_REGISTER 0
#define LED_PIO_CAPTURE 0
#define LED_PIO_DATA_WIDTH 10
#define LED_PIO_DO_TEST_BENCH_WIRING 0
#define LED_PIO_DRIVEN_SIM_VALUE 0
#define LED_PIO_EDGE_TYPE NONE
#define LED_PIO_FREQ 50000000
#define LED_PIO_HAS_IN 0
#define LED_PIO_HAS_OUT 1
#define LED_PIO_HAS_TRI 0
#define LED_PIO_IRQ_TYPE NONE
#define LED_PIO_RESET_VALUE 0

/*
 * Macros for device 'dipsw_pio', class 'altera_avalon_pio'
 * The macros are prefixed with 'DIPSW_PIO_'.
 * The prefix is the slave descriptor.
 */
#define DIPSW_PIO_COMPONENT_TYPE altera_avalon_pio
#define DIPSW_PIO_COMPONENT_NAME dipsw_pio
#define DIPSW_PIO_BASE 0x170
#define DIPSW_PIO_SPAN 16
#define DIPSW_PIO_END 0x17f
#define DIPSW_PIO_IRQ 0
#define DIPSW_PIO_BIT_CLEARING_EDGE_REGISTER 1
#define DIPSW_PIO_BIT_MODIFYING_OUTPUT_REGISTER 0
#define DIPSW_PIO_CAPTURE 1
#define DIPSW_PIO_DATA_WIDTH 10
#define DIPSW_PIO_DO_TEST_BENCH_WIRING 0
#define DIPSW_PIO_DRIVEN_SIM_VALUE 0
#define DIPSW_PIO_EDGE_TYPE ANY
#define DIPSW_PIO_FREQ 50000000
#define DIPSW_PIO_HAS_IN 1
#define DIPSW_PIO_HAS_OUT 0
#define DIPSW_PIO_HAS_TRI 0
#define DIPSW_PIO_IRQ_TYPE EDGE
#define DIPSW_PIO_RESET_VALUE 0

/*
 * Macros for device 'button_pio', class 'altera_avalon_pio'
 * The macros are prefixed with 'BUTTON_PIO_'.
 * The prefix is the slave descriptor.
 */
#define BUTTON_PIO_COMPONENT_TYPE altera_avalon_pio
#define BUTTON_PIO_COMPONENT_NAME button_pio
#define BUTTON_PIO_BASE 0x180
#define BUTTON_PIO_SPAN 16
#define BUTTON_PIO_END 0x18f
#define BUTTON_PIO_IRQ 1
#define BUTTON_PIO_BIT_CLEARING_EDGE_REGISTER 1
#define BUTTON_PIO_BIT_MODIFYING_OUTPUT_REGISTER 0
#define BUTTON_PIO_CAPTURE 1
#define BUTTON_PIO_DATA_WIDTH 4
#define BUTTON_PIO_DO_TEST_BENCH_WIRING 0
#define BUTTON_PIO_DRIVEN_SIM_VALUE 0
#define BUTTON_PIO_EDGE_TYPE FALLING
#define BUTTON_PIO_FREQ 50000000
#define BUTTON_PIO_HAS_IN 1
#define BUTTON_PIO_HAS_OUT 0
#define BUTTON_PIO_HAS_TRI 0
#define BUTTON_PIO_IRQ_TYPE EDGE
#define BUTTON_PIO_RESET_VALUE 0

/*
 * Macros for device 'sysid_qsys', class 'altera_avalon_sysid_qsys'
 * The macros are prefixed with 'SYSID_QSYS_'.
 * The prefix is the slave descriptor.
 */
#define SYSID_QSYS_COMPONENT_TYPE altera_avalon_sysid_qsys
#define SYSID_QSYS_COMPONENT_NAME sysid_qsys
#define SYSID_QSYS_BASE 0x190
#define SYSID_QSYS_SPAN 8
#define SYSID_QSYS_END 0x197
#define SYSID_QSYS_ID 2899645186
#define SYSID_QSYS_TIMESTAMP 1606363703

/*
 * Macros for device 'jtag_uart', class 'altera_avalon_jtag_uart'
 * The macros are prefixed with 'JTAG_UART_'.
 * The prefix is the slave descriptor.
 */
#define JTAG_UART_COMPONENT_TYPE altera_avalon_jtag_uart
#define JTAG_UART_COMPONENT_NAME jtag_uart
#define JTAG_UART_BASE 0x20000
#define JTAG_UART_SPAN 8
#define JTAG_UART_END 0x20007
#define JTAG_UART_IRQ 2
#define JTAG_UART_READ_DEPTH 64
#define JTAG_UART_READ_THRESHOLD 8
#define JTAG_UART_WRITE_DEPTH 64
#define JTAG_UART_WRITE_THRESHOLD 8


#endif /* _ALTERA_HPS_0_H_ */
